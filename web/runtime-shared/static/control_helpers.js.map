{"version":3,"sources":["webpack://rdk-web/./src/rc/control_helpers.js"],"names":["window","BaseControlHelper","moveStraight","name","distance_mm","speed_mm_s","cb","req","baseApi","MoveStraightRequest","setName","setMmPerSec","setDistanceMm","rcLogConditionally","baseService","moveArc","angle_deg","MoveArcRequest","setAngleDeg","spin","speed_deg_s","SpinRequest","setDegsPerSec","keyboardBaseDefaults","maxSpeed","maxAngle","distRatio","computeKeyboardBaseControls","keysPressed","mmPerSec","angleDeg","distance","speed","angle","moveType","forward","backward","right","left","Math","abs","console","log"],"mappings":"AAGAA,OAAOC,kBAAoB,CACzBC,aAAc,SAASC,EAAMC,EAAaC,EAAYC,GACpD,MAAMC,EAAM,IAAIC,QAAQC,oBACxBF,EAAIG,QAAQP,GACZI,EAAII,YAAYN,GAChBE,EAAIK,cAAcR,GAElBS,mBAAmBN,GACnBO,YAAYZ,aAAaK,EAAK,GAAID,IAGpCS,QAAS,SAASZ,EAAMC,EAAaC,EAAYW,EAAWV,GAC1D,MAAMC,EAAM,IAAIC,QAAQS,eACxBV,EAAIG,QAAQP,GACZI,EAAIK,cAAcR,GAClBG,EAAII,YAAYN,GAChBE,EAAIW,YAAYF,GAEhBH,mBAAmBN,GACnBO,YAAYC,QAAQR,EAAK,GAAID,IAG/Ba,KAAM,SAAShB,EAAMa,EAAWI,EAAad,GAC3C,MAAMC,EAAM,IAAIC,QAAQa,YACxBd,EAAIG,QAAQP,GACZI,EAAIW,YAAYF,GAChBT,EAAIe,cAAcF,GAElBP,mBAAmBN,GACnBO,YAAYK,KAAKZ,EAAK,GAAID,KAK9BN,OAAOuB,qBAAuB,CAC5BC,SAAW,IACXC,SAAW,IACXC,UAAY,IAOd1B,OAAO2B,4BAA8B,SAASC,GAC5C,IAAIC,EACAC,EAuBAC,EACAC,EACAC,EAEAC,EAwBJ,OAhDEL,EADED,EAAYO,SAAWP,EAAYQ,SAC1B,EACFR,EAAYO,QACV,EACFP,EAAYQ,UACT,EAED,EAKXN,EADEF,EAAYS,OAAST,EAAYU,KACxB,EACFV,EAAYS,OACT,EACHT,EAAYU,KACV,EAEA,EAQI,IAAbT,GAA+B,IAAbC,GACpBI,EAAW,OACXH,EAAWR,qBAAqBC,SAAWD,qBAAqBG,UAChEM,EAAQ,EACRC,EAAQH,EAAWP,qBAAqBE,UAAY,GAC9B,IAAbI,GACTK,EAAW,OACXH,EAAW,EACXC,EAAQF,EAAWP,qBAAqBC,SACxCS,EAAQM,KAAKC,IAAIV,EAAWP,qBAAqBE,SAAWF,qBAAqBG,UAAY,IACvE,IAAbI,GACTI,EAAW,WACXH,EAAWQ,KAAKC,IAAIX,EAAWN,qBAAqBC,SAAWD,qBAAqBG,WACpFM,EAAQH,EAAWN,qBAAqBC,SACxCS,EAAQM,KAAKC,IAAIV,EAAWP,qBAAqBE,SAAWF,qBAAqBG,aAEjFQ,EAAW,MACXH,EAAWQ,KAAKC,IAAIX,EAAWN,qBAAqBC,SAAWD,qBAAqBG,WACpFM,EAAQH,EAAWN,qBAAqBC,SACxCS,EAAQH,EAAWP,qBAAqBE,SAAWF,qBAAqBG,UAAY,EAAI,GAG1Fe,QAAQC,IAAI,4DAA6DR,EAAUL,EAAUC,EAAUC,EAAUC,EAAOC,GACjH,CAACF,WAAUC,QAAOC","file":"control_helpers.js","sourcesContent":["/*\nSimple base control helpers. Should be replaced by a proper SDK once available.\n*/\nwindow.BaseControlHelper = {\n  moveStraight: function(name, distance_mm, speed_mm_s, cb) {\n    const req = new baseApi.MoveStraightRequest();\n    req.setName(name);\n    req.setMmPerSec(speed_mm_s);\n    req.setDistanceMm(distance_mm);\n\n    rcLogConditionally(req);\n    baseService.moveStraight(req, {}, cb);\n  },\n\n  moveArc: function(name, distance_mm, speed_mm_s, angle_deg, cb) {\n    const req = new baseApi.MoveArcRequest();\n    req.setName(name);\n    req.setDistanceMm(distance_mm);\n    req.setMmPerSec(speed_mm_s);\n    req.setAngleDeg(angle_deg);\n\n    rcLogConditionally(req);\n    baseService.moveArc(req, {}, cb);\n  },\n\n  spin: function(name, angle_deg, speed_deg_s, cb) {\n    const req = new baseApi.SpinRequest();\n    req.setName(name);\n    req.setAngleDeg(angle_deg);\n    req.setDegsPerSec(speed_deg_s);\n\n    rcLogConditionally(req);\n    baseService.spin(req, {}, cb);\n  },\n};\n\n// Leaving in window scope for tunning. Should be const or in inputs\nwindow.keyboardBaseDefaults = {\n  maxSpeed : 300,\n  maxAngle : 425,\n  distRatio : 10,\n};\n\n/*\n  Input: State of keys. e.g. {straight : true, backward : false, right : false, left: false}\n  Output: distance, speed, and angle parameters for MoveArc\n*/\nwindow.computeKeyboardBaseControls = function(keysPressed) {\n  let mmPerSec;\n  let angleDeg;\n\n  if (keysPressed.forward && keysPressed.backward) {\n    mmPerSec = 0;\n  } else if (keysPressed.forward) {\n    mmPerSec = 1;\n  } else if (keysPressed.backward) {\n    mmPerSec = -1;\n  } else {\n    mmPerSec = 0;\n  }\n\n  // Angle\n  if (keysPressed.right && keysPressed.left) {\n    angleDeg = 0;\n  } else if (keysPressed.right) {\n    angleDeg = -1;\n  } else if (keysPressed.left) {\n    angleDeg = 1;\n  } else {\n    angleDeg = 0;\n  }\n\n  let distance;\n  let speed;\n  let angle;\n\n  let moveType; // for logging only\n  if (mmPerSec === 0 && angleDeg === 0) {\n    moveType = 'Stop';\n    distance = keyboardBaseDefaults.maxSpeed * keyboardBaseDefaults.distRatio;\n    speed = 0;\n    angle = angleDeg * keyboardBaseDefaults.maxAngle * -1;\n  } else if (mmPerSec === 0) {\n    moveType = 'Spin';\n    distance = 0;\n    speed = angleDeg * keyboardBaseDefaults.maxSpeed;\n    angle = Math.abs(angleDeg * keyboardBaseDefaults.maxAngle * keyboardBaseDefaults.distRatio / 2);\n  } else if (angleDeg === 0) {\n    moveType = 'Straight';\n    distance = Math.abs(mmPerSec * keyboardBaseDefaults.maxSpeed * keyboardBaseDefaults.distRatio);\n    speed = mmPerSec * keyboardBaseDefaults.maxSpeed;\n    angle = Math.abs(angleDeg * keyboardBaseDefaults.maxAngle * keyboardBaseDefaults.distRatio);\n  } else {\n    moveType = 'Arc';\n    distance = Math.abs(mmPerSec * keyboardBaseDefaults.maxSpeed * keyboardBaseDefaults.distRatio);\n    speed = mmPerSec * keyboardBaseDefaults.maxSpeed;\n    angle = angleDeg * keyboardBaseDefaults.maxAngle * keyboardBaseDefaults.distRatio * 2 - 1;\n  }\n\n  console.log('%s: s = %f | a = %f | Dist = %f | Speed = %f | Angle = %f', moveType, mmPerSec, angleDeg, distance, speed, angle);\n  return {distance, speed, angle};\n};\n"],"sourceRoot":""}