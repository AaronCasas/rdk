// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LidarServiceClient is the client API for LidarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LidarServiceClient interface {
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
	Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResponse, error)
	Range(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (*RangeResponse, error)
	Bounds(ctx context.Context, in *BoundsRequest, opts ...grpc.CallOption) (*BoundsResponse, error)
	AngularResolution(ctx context.Context, in *AngularResolutionRequest, opts ...grpc.CallOption) (*AngularResolutionResponse, error)
}

type lidarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLidarServiceClient(cc grpc.ClientConnInterface) LidarServiceClient {
	return &lidarServiceClient{cc}
}

func (c *lidarServiceClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/proto.lidar.v1.LidarService/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lidarServiceClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/proto.lidar.v1.LidarService/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lidarServiceClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/proto.lidar.v1.LidarService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lidarServiceClient) Scan(ctx context.Context, in *ScanRequest, opts ...grpc.CallOption) (*ScanResponse, error) {
	out := new(ScanResponse)
	err := c.cc.Invoke(ctx, "/proto.lidar.v1.LidarService/Scan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lidarServiceClient) Range(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (*RangeResponse, error) {
	out := new(RangeResponse)
	err := c.cc.Invoke(ctx, "/proto.lidar.v1.LidarService/Range", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lidarServiceClient) Bounds(ctx context.Context, in *BoundsRequest, opts ...grpc.CallOption) (*BoundsResponse, error) {
	out := new(BoundsResponse)
	err := c.cc.Invoke(ctx, "/proto.lidar.v1.LidarService/Bounds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lidarServiceClient) AngularResolution(ctx context.Context, in *AngularResolutionRequest, opts ...grpc.CallOption) (*AngularResolutionResponse, error) {
	out := new(AngularResolutionResponse)
	err := c.cc.Invoke(ctx, "/proto.lidar.v1.LidarService/AngularResolution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LidarServiceServer is the server API for LidarService service.
// All implementations must embed UnimplementedLidarServiceServer
// for forward compatibility
type LidarServiceServer interface {
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	Scan(context.Context, *ScanRequest) (*ScanResponse, error)
	Range(context.Context, *RangeRequest) (*RangeResponse, error)
	Bounds(context.Context, *BoundsRequest) (*BoundsResponse, error)
	AngularResolution(context.Context, *AngularResolutionRequest) (*AngularResolutionResponse, error)
	mustEmbedUnimplementedLidarServiceServer()
}

// UnimplementedLidarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLidarServiceServer struct {
}

func (UnimplementedLidarServiceServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedLidarServiceServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedLidarServiceServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedLidarServiceServer) Scan(context.Context, *ScanRequest) (*ScanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scan not implemented")
}
func (UnimplementedLidarServiceServer) Range(context.Context, *RangeRequest) (*RangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Range not implemented")
}
func (UnimplementedLidarServiceServer) Bounds(context.Context, *BoundsRequest) (*BoundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bounds not implemented")
}
func (UnimplementedLidarServiceServer) AngularResolution(context.Context, *AngularResolutionRequest) (*AngularResolutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AngularResolution not implemented")
}
func (UnimplementedLidarServiceServer) mustEmbedUnimplementedLidarServiceServer() {}

// UnsafeLidarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LidarServiceServer will
// result in compilation errors.
type UnsafeLidarServiceServer interface {
	mustEmbedUnimplementedLidarServiceServer()
}

func RegisterLidarServiceServer(s grpc.ServiceRegistrar, srv LidarServiceServer) {
	s.RegisterService(&LidarService_ServiceDesc, srv)
}

func _LidarService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LidarServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.lidar.v1.LidarService/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LidarServiceServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LidarService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LidarServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.lidar.v1.LidarService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LidarServiceServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LidarService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LidarServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.lidar.v1.LidarService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LidarServiceServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LidarService_Scan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LidarServiceServer).Scan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.lidar.v1.LidarService/Scan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LidarServiceServer).Scan(ctx, req.(*ScanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LidarService_Range_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LidarServiceServer).Range(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.lidar.v1.LidarService/Range",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LidarServiceServer).Range(ctx, req.(*RangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LidarService_Bounds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LidarServiceServer).Bounds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.lidar.v1.LidarService/Bounds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LidarServiceServer).Bounds(ctx, req.(*BoundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LidarService_AngularResolution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AngularResolutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LidarServiceServer).AngularResolution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.lidar.v1.LidarService/AngularResolution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LidarServiceServer).AngularResolution(ctx, req.(*AngularResolutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LidarService_ServiceDesc is the grpc.ServiceDesc for LidarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LidarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.lidar.v1.LidarService",
	HandlerType: (*LidarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _LidarService_Info_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _LidarService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _LidarService_Stop_Handler,
		},
		{
			MethodName: "Scan",
			Handler:    _LidarService_Scan_Handler,
		},
		{
			MethodName: "Range",
			Handler:    _LidarService_Range_Handler,
		},
		{
			MethodName: "Bounds",
			Handler:    _LidarService_Bounds_Handler,
		},
		{
			MethodName: "AngularResolution",
			Handler:    _LidarService_AngularResolution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/lidar/v1/lidar.proto",
}
