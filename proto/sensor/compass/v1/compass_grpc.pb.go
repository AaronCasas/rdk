// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompassServiceClient is the client API for CompassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompassServiceClient interface {
	Heading(ctx context.Context, in *HeadingRequest, opts ...grpc.CallOption) (*HeadingResponse, error)
	StartCalibration(ctx context.Context, in *StartCalibrationRequest, opts ...grpc.CallOption) (*StartCalibrationResponse, error)
	StopCalibration(ctx context.Context, in *StopCalibrationRequest, opts ...grpc.CallOption) (*StopCalibrationResponse, error)
}

type compassServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompassServiceClient(cc grpc.ClientConnInterface) CompassServiceClient {
	return &compassServiceClient{cc}
}

func (c *compassServiceClient) Heading(ctx context.Context, in *HeadingRequest, opts ...grpc.CallOption) (*HeadingResponse, error) {
	out := new(HeadingResponse)
	err := c.cc.Invoke(ctx, "/proto.sensor.compass.v1.CompassService/Heading", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) StartCalibration(ctx context.Context, in *StartCalibrationRequest, opts ...grpc.CallOption) (*StartCalibrationResponse, error) {
	out := new(StartCalibrationResponse)
	err := c.cc.Invoke(ctx, "/proto.sensor.compass.v1.CompassService/StartCalibration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *compassServiceClient) StopCalibration(ctx context.Context, in *StopCalibrationRequest, opts ...grpc.CallOption) (*StopCalibrationResponse, error) {
	out := new(StopCalibrationResponse)
	err := c.cc.Invoke(ctx, "/proto.sensor.compass.v1.CompassService/StopCalibration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompassServiceServer is the server API for CompassService service.
// All implementations must embed UnimplementedCompassServiceServer
// for forward compatibility
type CompassServiceServer interface {
	Heading(context.Context, *HeadingRequest) (*HeadingResponse, error)
	StartCalibration(context.Context, *StartCalibrationRequest) (*StartCalibrationResponse, error)
	StopCalibration(context.Context, *StopCalibrationRequest) (*StopCalibrationResponse, error)
	mustEmbedUnimplementedCompassServiceServer()
}

// UnimplementedCompassServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompassServiceServer struct {
}

func (UnimplementedCompassServiceServer) Heading(context.Context, *HeadingRequest) (*HeadingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heading not implemented")
}
func (UnimplementedCompassServiceServer) StartCalibration(context.Context, *StartCalibrationRequest) (*StartCalibrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartCalibration not implemented")
}
func (UnimplementedCompassServiceServer) StopCalibration(context.Context, *StopCalibrationRequest) (*StopCalibrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopCalibration not implemented")
}
func (UnimplementedCompassServiceServer) mustEmbedUnimplementedCompassServiceServer() {}

// UnsafeCompassServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompassServiceServer will
// result in compilation errors.
type UnsafeCompassServiceServer interface {
	mustEmbedUnimplementedCompassServiceServer()
}

func RegisterCompassServiceServer(s grpc.ServiceRegistrar, srv CompassServiceServer) {
	s.RegisterService(&CompassService_ServiceDesc, srv)
}

func _CompassService_Heading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeadingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).Heading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.sensor.compass.v1.CompassService/Heading",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).Heading(ctx, req.(*HeadingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_StartCalibration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartCalibrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).StartCalibration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.sensor.compass.v1.CompassService/StartCalibration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).StartCalibration(ctx, req.(*StartCalibrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CompassService_StopCalibration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopCalibrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompassServiceServer).StopCalibration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.sensor.compass.v1.CompassService/StopCalibration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompassServiceServer).StopCalibration(ctx, req.(*StopCalibrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompassService_ServiceDesc is the grpc.ServiceDesc for CompassService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompassService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.sensor.compass.v1.CompassService",
	HandlerType: (*CompassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heading",
			Handler:    _CompassService_Heading_Handler,
		},
		{
			MethodName: "StartCalibration",
			Handler:    _CompassService_StartCalibration_Handler,
		},
		{
			MethodName: "StopCalibration",
			Handler:    _CompassService_StopCalibration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/sensor/compass/v1/compass.proto",
}
