syntax = "proto3";
option go_package = "go.viam.com/robotcore/proto/api/v1";

package proto.api.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/duration.proto";
import "google/api/annotations.proto";
import "google/api/httpbody.proto";

service RobotService {
	rpc Status(StatusRequest) returns (StatusResponse) {
	    option (google.api.http) = {
			get: "/v1/status"
		};
	}

	rpc StatusStream(StatusStreamRequest) returns (stream StatusStreamResponse) {
	    option (google.api.http) = {
			get: "/v1/status_stream"
		};
	}

	rpc DoAction(DoActionRequest) returns (DoActionResponse) {
		option (google.api.http) = {
			post: "/v1/do_action"
		};	
	}

	// Arm

	rpc ArmCurrentPosition(ArmCurrentPositionRequest) returns (ArmCurrentPositionResponse) {
		option (google.api.http) = {
			get: "/v1/arm/{name}/current_position"
		};	
	}

	rpc ArmMoveToPosition(ArmMoveToPositionRequest) returns (ArmMoveToPositionResponse) {
		option (google.api.http) = {
			put: "/v1/arm/{name}/move_to_position"
		};	
	}

	rpc ArmCurrentJointPositions(ArmCurrentJointPositionsRequest) returns (ArmCurrentJointPositionsResponse) {
		option (google.api.http) = {
			get: "/v1/arm/{name}/current_joint_positions"
		};	
	}

	rpc ArmMoveToJointPositions(ArmMoveToJointPositionsRequest) returns (ArmMoveToJointPositionsResponse) {
		option (google.api.http) = {
			put: "/v1/arm/{name}/move_to_joint_positions"
		};	
	}

	// Base

	rpc BaseMoveStraight(BaseMoveStraightRequest) returns (BaseMoveStraightResponse) {
		option (google.api.http) = {
			post: "/v1/base/{name}/move_straight"
		};	
	}

	rpc BaseSpin(BaseSpinRequest) returns (BaseSpinResponse) {
		option (google.api.http) = {
			post: "/v1/base/{name}/spin"
		};	
	}

	rpc BaseStop(BaseStopRequest) returns (BaseStopResponse) {
		option (google.api.http) = {
			post: "/v1/base/{name}/stop"
		};	
	}

	// Gripper

	rpc GripperOpen(GripperOpenRequest) returns (GripperOpenResponse) {
		option (google.api.http) = {
			put: "/v1/gripper/{name}/open"
		};	
	}

	rpc GripperGrab(GripperGrabRequest) returns (GripperGrabResponse) {
		option (google.api.http) = {
			put: "/v1/gripper/{name}/grab"
		};	
	}

	// Camera

	rpc CameraFrame(CameraFrameRequest) returns (CameraFrameResponse) {
		option (google.api.http) = {
			get: "/v1/camera/{name}/frame"
		};
	}

	rpc CameraRenderFrame(CameraRenderFrameRequest) returns (google.api.HttpBody) {
		option (google.api.http) = {
			get: "/v1/camera/{name}/render_frame"
		};
	}

	// Lidar

	rpc LidarInfo(LidarInfoRequest) returns (LidarInfoResponse) {
	    option (google.api.http) = {
			get: "/v1/lidar/{name}/info"
		};
	}
	rpc LidarStart(LidarStartRequest) returns (LidarStartResponse) {
		option (google.api.http) = {
			post: "/v1/lidar/{name}/start"
		};
	}
	rpc LidarStop(LidarStopRequest) returns (LidarStopResponse) {
		option (google.api.http) = {
			post: "/v1/lidar/{name}/stop"
		};
	}
	rpc LidarScan(LidarScanRequest) returns (LidarScanResponse) {
		option (google.api.http) = {
			post: "/v1/lidar/{name}/scan"
		};
	}
	rpc LidarRange(LidarRangeRequest) returns (LidarRangeResponse) {
		option (google.api.http) = {
			get: "/v1/lidar/{name}/range"
		};
	}
	rpc LidarBounds(LidarBoundsRequest) returns (LidarBoundsResponse) {
		option (google.api.http) = {
			get: "/v1/lidar/{name}/bounds"
		};
	}
	rpc LidarAngularResolution(LidarAngularResolutionRequest) returns (LidarAngularResolutionResponse) {
		option (google.api.http) = {
			get: "/v1/lidar/{name}/angular_resolution"
		};
	}

	// Board

	rpc BoardStatus(BoardStatusRequest) returns (BoardStatusResponse) {
		option (google.api.http) = {
			get: "/v1/board/{name}/status"
		};	
	}

	// Motor

	rpc BoardMotorGo(BoardMotorGoRequest) returns (BoardMotorGoResponse) {
		option (google.api.http) = {
			put: "/v1/board/{board_name}/motor/{motor_name}/go"
		};
	}

	rpc BoardMotorGoFor(BoardMotorGoForRequest) returns (BoardMotorGoForResponse) {
		option (google.api.http) = {
			put: "/v1/board/{board_name}/motor/{motor_name}/go_for"
		};
	}

	// Servo

	rpc BoardServoMove(BoardServoMoveRequest) returns (BoardServoMoveResponse) {
		option (google.api.http) = {
			put: "/v1/board/{board_name}/servero/{servo_name}/move"
		};
	}

	// Sensor

	rpc SensorReadings(SensorReadingsRequest) returns (SensorReadingsResponse) {
		option (google.api.http) = {
			get: "/v1/sensors/sensor/{name}/readings"
		};	
	}

	// Compass

	rpc CompassHeading(CompassHeadingRequest) returns (CompassHeadingResponse) {
	    option (google.api.http) = {
			get: "/v1/sensors/compass/{name}/heading"
		};
	}
	rpc CompassStartCalibration(CompassStartCalibrationRequest) returns (CompassStartCalibrationResponse) {

		option (google.api.http) = {
			post: "/v1/sensors/compass/{name}/start_calibration"
		};
	}

	rpc CompassStopCalibration(CompassStopCalibrationRequest) returns (CompassStopCalibrationResponse) {
		option (google.api.http) = {
			post: "/v1/sensors/compass/{name}/stop_calibration"
		};
	}

	// Relative Compass

	rpc CompassMark(CompassMarkRequest) returns (CompassMarkResponse) {
		option (google.api.http) = {
			post: "/v1/sensors/compass/{name}/mark"
		};
	}
}

message StatusRequest {}

message StatusStreamRequest {
	google.protobuf.Duration every = 1;
}

message StatusResponse {
	Status status = 1;
}

message StatusStreamResponse {
	Status status = 1;
}

message Status {
	map<string, ArmStatus> arms = 1;
	map<string, bool> bases = 2;
	map<string, bool> grippers = 3;
	map<string, BoardStatus> boards = 4;
	map<string, bool> cameras = 5;
	map<string, bool> lidar_devices = 6;
	map<string, SensorStatus> sensors = 7;
}

message DoActionRequest {
	string name = 1;
}

message DoActionResponse {}

// Arm

message ArmStatus {
	ArmPosition   grid_position = 1;
	JointPositions joint_positions = 2;
}

message ArmPosition {
	// meters of the end effector from the base
	double x = 1;
	double y = 2;
	double z = 3;

	// angular orientation about each axis, in degrees
	double r_x = 4;
	double r_y = 5;
	double r_z = 6;
}

message JointPositions {
	repeated double degrees = 1;
}

message ArmCurrentPositionRequest {
	string name = 1;
}

message ArmCurrentPositionResponse {
	ArmPosition position = 1;
}

message ArmCurrentJointPositionsRequest {
	string name = 1;
}

message ArmCurrentJointPositionsResponse {
	JointPositions positions = 1;
}

message ArmMoveToPositionRequest {
	string name = 1;
	ArmPosition to = 2;
}

message ArmMoveToPositionResponse {}

message ArmMoveToJointPositionsRequest {
	string name = 1;
	JointPositions to = 2;
}

message ArmMoveToJointPositionsResponse {}

// Base

message BaseMoveStraightRequest {
	string name = 1;
	int64 distance_millis = 2;
	double millis_per_sec = 3;
}

message BaseMoveStraightResponse {
	bool success = 1;
	string error = 2;
	int64 distance_millis = 3;
}

message BaseSpinRequest {
	string name = 1;
	double angle_deg = 2;
	double degs_per_sec = 3;
}

message BaseSpinResponse {
	bool success = 1;
	string error = 2;
	double angle_deg = 3;
}

message BaseStopRequest {
	string name = 1;
}

message BaseStopResponse {}

// Gripper

message GripperOpenRequest {
	string name = 1;
}

message GripperOpenResponse {}

message GripperGrabRequest {
	string name = 1;
}

message GripperGrabResponse {
	bool grabbed = 1;
}

// Camera

message CameraFrameRequest {
	string name = 1;
	string mime_type = 2;
}

message CameraRenderFrameRequest {
	string name = 1;
	string mime_type = 2;
}

message CameraFrameResponse {
	string mime_type = 1;
	bytes frame = 2;
	int64 dim_x = 3;
	int64 dim_y = 4;
}

// Lidar

message LidarMeasurement  {
	double angle = 1;
	double angle_deg = 2;
	double distance = 3;
	double x = 4;
	double y = 5;
}

message LidarInfoRequest {
	string name = 1;
}

message LidarInfoResponse {
	google.protobuf.Struct info = 1;
}

message LidarStartRequest {
	string name = 1;
}

message LidarStartResponse {}

message LidarStopRequest {
	string name = 1;
}

message LidarStopResponse {}

message LidarScanRequest {
	string name = 1;
	int32 count = 2;
	bool no_filter = 3;
}

message LidarScanResponse {
	repeated LidarMeasurement measurements = 1;
}

message LidarRangeRequest {
	string name = 1;
}

message LidarRangeResponse {
	int64 range = 1;
}

message LidarBoundsRequest {
	string name = 1;
}

message LidarBoundsResponse {
	int64 x = 1;
	int64 y = 2;
}

message LidarAngularResolutionRequest {
	string name = 1;
}

message LidarAngularResolutionResponse {
	double angular_resolution = 1;
}

// Board

message BoardStatus {
	map<string, MotorStatus> motors = 1;
	map<string, ServoStatus> servos = 2;
	map<string, AnalogStatus> analogs = 3;
	map<string, DigitalInterruptStatus> digital_interrupts = 4;
}

message MotorStatus {
	bool on = 1;
	bool position_supported = 2;
	double position = 3;
}

message ServoStatus {
	uint32 angle = 1;
}

message AnalogStatus {
	int32 value = 1;
}

message DigitalInterruptStatus {
	int64 value = 1;
}

message SensorStatus {
	string type = 1;
}

message BoardStatusRequest {
	string name = 1;
}

message BoardStatusResponse {
	BoardStatus status = 1;
}

// Motor

message BoardMotorGoRequest {
	string board_name = 1;
	string motor_name = 2;
	DirectionRelative direction = 3; 
	uint32 power = 4;
}

message BoardMotorGoResponse {}

message BoardMotorGoForRequest {
	string board_name = 1;
	string motor_name = 2;
	DirectionRelative direction = 3;
	double rpm = 4;
	double revolutions = 5;
}

message BoardMotorGoForResponse {}

// Servo

message BoardServoMoveRequest {
	string board_name = 1;
	string servo_name = 2;
	uint32 angle_deg = 3; // (0-180)
}

message BoardServoMoveResponse {}

// Sensor

message SensorReadingsRequest {
	string name = 1;
}

message SensorReadingsResponse {
	repeated google.protobuf.Value readings = 1;
}

// Compass

message CompassHeadingRequest {
	string name = 1;
}

message CompassHeadingResponse {
	double heading = 1;
}

message CompassStartCalibrationRequest {
	string name = 1;
}

message CompassStartCalibrationResponse {}

message CompassStopCalibrationRequest {
	string name = 1;
}

message CompassStopCalibrationResponse {}

// Relative Compass

message CompassMarkRequest {
	string name = 1;
}

message CompassMarkResponse {}

enum DirectionRelative {
	DIRECTION_RELATIVE_UNSPECIFIED = 0;
	DIRECTION_RELATIVE_FORWARD = 1;
	DIRECTION_RELATIVE_BACKWARD = 2;
}
