// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BoardServiceClient is the client API for BoardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BoardServiceClient interface {
	Status(ctx context.Context, in *BoardServiceStatusRequest, opts ...grpc.CallOption) (*BoardServiceStatusResponse, error)
	SetGPIO(ctx context.Context, in *BoardServiceSetGPIORequest, opts ...grpc.CallOption) (*BoardServiceSetGPIOResponse, error)
	// GetGPIO gets the high/low state of the given pin of a board of the underlying robot.
	GetGPIO(ctx context.Context, in *BoardServiceGetGPIORequest, opts ...grpc.CallOption) (*BoardServiceGetGPIOResponse, error)
	// SetPWM sets the given pin of a board of the underlying robot to the given duty cycle.
	SetPWM(ctx context.Context, in *BoardServiceSetPWMRequest, opts ...grpc.CallOption) (*BoardServiceSetPWMResponse, error)
	// SetPWMFrequency sets the given pin of a board of the underlying robot to the given PWM frequency. 0 will use the board's default PWM frequency.
	SetPWMFrequency(ctx context.Context, in *BoardServiceSetPWMFrequencyRequest, opts ...grpc.CallOption) (*BoardServiceSetPWMFrequencyResponse, error)
	// ReadAnalogReader reads off the current value of an analog reader of a board of the underlying robot.
	ReadAnalogReader(ctx context.Context, in *BoardServiceReadAnalogReaderRequest, opts ...grpc.CallOption) (*BoardServiceReadAnalogReaderResponse, error)
	// GetDigitalInterruptValue returns the current value of the interrupt which is based on the type of interrupt.
	GetDigitalInterruptValue(ctx context.Context, in *BoardServiceGetDigitalInterruptValueRequest, opts ...grpc.CallOption) (*BoardServiceGetDigitalInterruptValueResponse, error)
}

type boardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBoardServiceClient(cc grpc.ClientConnInterface) BoardServiceClient {
	return &boardServiceClient{cc}
}

func (c *boardServiceClient) Status(ctx context.Context, in *BoardServiceStatusRequest, opts ...grpc.CallOption) (*BoardServiceStatusResponse, error) {
	out := new(BoardServiceStatusResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.BoardService/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) SetGPIO(ctx context.Context, in *BoardServiceSetGPIORequest, opts ...grpc.CallOption) (*BoardServiceSetGPIOResponse, error) {
	out := new(BoardServiceSetGPIOResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.BoardService/SetGPIO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) GetGPIO(ctx context.Context, in *BoardServiceGetGPIORequest, opts ...grpc.CallOption) (*BoardServiceGetGPIOResponse, error) {
	out := new(BoardServiceGetGPIOResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.BoardService/GetGPIO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) SetPWM(ctx context.Context, in *BoardServiceSetPWMRequest, opts ...grpc.CallOption) (*BoardServiceSetPWMResponse, error) {
	out := new(BoardServiceSetPWMResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.BoardService/SetPWM", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) SetPWMFrequency(ctx context.Context, in *BoardServiceSetPWMFrequencyRequest, opts ...grpc.CallOption) (*BoardServiceSetPWMFrequencyResponse, error) {
	out := new(BoardServiceSetPWMFrequencyResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.BoardService/SetPWMFrequency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) ReadAnalogReader(ctx context.Context, in *BoardServiceReadAnalogReaderRequest, opts ...grpc.CallOption) (*BoardServiceReadAnalogReaderResponse, error) {
	out := new(BoardServiceReadAnalogReaderResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.BoardService/ReadAnalogReader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *boardServiceClient) GetDigitalInterruptValue(ctx context.Context, in *BoardServiceGetDigitalInterruptValueRequest, opts ...grpc.CallOption) (*BoardServiceGetDigitalInterruptValueResponse, error) {
	out := new(BoardServiceGetDigitalInterruptValueResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.BoardService/GetDigitalInterruptValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BoardServiceServer is the server API for BoardService service.
// All implementations must embed UnimplementedBoardServiceServer
// for forward compatibility
type BoardServiceServer interface {
	Status(context.Context, *BoardServiceStatusRequest) (*BoardServiceStatusResponse, error)
	SetGPIO(context.Context, *BoardServiceSetGPIORequest) (*BoardServiceSetGPIOResponse, error)
	// GetGPIO gets the high/low state of the given pin of a board of the underlying robot.
	GetGPIO(context.Context, *BoardServiceGetGPIORequest) (*BoardServiceGetGPIOResponse, error)
	// SetPWM sets the given pin of a board of the underlying robot to the given duty cycle.
	SetPWM(context.Context, *BoardServiceSetPWMRequest) (*BoardServiceSetPWMResponse, error)
	// SetPWMFrequency sets the given pin of a board of the underlying robot to the given PWM frequency. 0 will use the board's default PWM frequency.
	SetPWMFrequency(context.Context, *BoardServiceSetPWMFrequencyRequest) (*BoardServiceSetPWMFrequencyResponse, error)
	// ReadAnalogReader reads off the current value of an analog reader of a board of the underlying robot.
	ReadAnalogReader(context.Context, *BoardServiceReadAnalogReaderRequest) (*BoardServiceReadAnalogReaderResponse, error)
	// GetDigitalInterruptValue returns the current value of the interrupt which is based on the type of interrupt.
	GetDigitalInterruptValue(context.Context, *BoardServiceGetDigitalInterruptValueRequest) (*BoardServiceGetDigitalInterruptValueResponse, error)
	mustEmbedUnimplementedBoardServiceServer()
}

// UnimplementedBoardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBoardServiceServer struct {
}

func (UnimplementedBoardServiceServer) Status(context.Context, *BoardServiceStatusRequest) (*BoardServiceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedBoardServiceServer) SetGPIO(context.Context, *BoardServiceSetGPIORequest) (*BoardServiceSetGPIOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGPIO not implemented")
}
func (UnimplementedBoardServiceServer) GetGPIO(context.Context, *BoardServiceGetGPIORequest) (*BoardServiceGetGPIOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGPIO not implemented")
}
func (UnimplementedBoardServiceServer) SetPWM(context.Context, *BoardServiceSetPWMRequest) (*BoardServiceSetPWMResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPWM not implemented")
}
func (UnimplementedBoardServiceServer) SetPWMFrequency(context.Context, *BoardServiceSetPWMFrequencyRequest) (*BoardServiceSetPWMFrequencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPWMFrequency not implemented")
}
func (UnimplementedBoardServiceServer) ReadAnalogReader(context.Context, *BoardServiceReadAnalogReaderRequest) (*BoardServiceReadAnalogReaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAnalogReader not implemented")
}
func (UnimplementedBoardServiceServer) GetDigitalInterruptValue(context.Context, *BoardServiceGetDigitalInterruptValueRequest) (*BoardServiceGetDigitalInterruptValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDigitalInterruptValue not implemented")
}
func (UnimplementedBoardServiceServer) mustEmbedUnimplementedBoardServiceServer() {}

// UnsafeBoardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BoardServiceServer will
// result in compilation errors.
type UnsafeBoardServiceServer interface {
	mustEmbedUnimplementedBoardServiceServer()
}

func RegisterBoardServiceServer(s grpc.ServiceRegistrar, srv BoardServiceServer) {
	s.RegisterService(&BoardService_ServiceDesc, srv)
}

func _BoardService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardServiceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.BoardService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).Status(ctx, req.(*BoardServiceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_SetGPIO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardServiceSetGPIORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).SetGPIO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.BoardService/SetGPIO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).SetGPIO(ctx, req.(*BoardServiceSetGPIORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_GetGPIO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardServiceGetGPIORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).GetGPIO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.BoardService/GetGPIO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).GetGPIO(ctx, req.(*BoardServiceGetGPIORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_SetPWM_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardServiceSetPWMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).SetPWM(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.BoardService/SetPWM",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).SetPWM(ctx, req.(*BoardServiceSetPWMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_SetPWMFrequency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardServiceSetPWMFrequencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).SetPWMFrequency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.BoardService/SetPWMFrequency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).SetPWMFrequency(ctx, req.(*BoardServiceSetPWMFrequencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_ReadAnalogReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardServiceReadAnalogReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).ReadAnalogReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.BoardService/ReadAnalogReader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).ReadAnalogReader(ctx, req.(*BoardServiceReadAnalogReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BoardService_GetDigitalInterruptValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BoardServiceGetDigitalInterruptValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BoardServiceServer).GetDigitalInterruptValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.BoardService/GetDigitalInterruptValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BoardServiceServer).GetDigitalInterruptValue(ctx, req.(*BoardServiceGetDigitalInterruptValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BoardService_ServiceDesc is the grpc.ServiceDesc for BoardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BoardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.api.component.v1.BoardService",
	HandlerType: (*BoardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _BoardService_Status_Handler,
		},
		{
			MethodName: "SetGPIO",
			Handler:    _BoardService_SetGPIO_Handler,
		},
		{
			MethodName: "GetGPIO",
			Handler:    _BoardService_GetGPIO_Handler,
		},
		{
			MethodName: "SetPWM",
			Handler:    _BoardService_SetPWM_Handler,
		},
		{
			MethodName: "SetPWMFrequency",
			Handler:    _BoardService_SetPWMFrequency_Handler,
		},
		{
			MethodName: "ReadAnalogReader",
			Handler:    _BoardService_ReadAnalogReader_Handler,
		},
		{
			MethodName: "GetDigitalInterruptValue",
			Handler:    _BoardService_GetDigitalInterruptValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api/component/v1/board.proto",
}
