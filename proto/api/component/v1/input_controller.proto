syntax = "proto3";
option go_package = "go.viam.com/rdk/proto/api/component/v1";
option java_package = "com.viam.rdk.proto.api.component.v1";

package proto.api.component.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

// InputControllerService services maintains all input controller associated with a robot
service InputControllerService {
  // GetControls returns a list of GetControls provided by the Controller
  rpc GetControls(InputControllerServiceGetControlsRequest) returns (InputControllerServiceGetControlsResponse) {
    option (google.api.http) = {
      get: "/api/v1/component/input/{controller}/controls"
    };
  }

	// GetEvents returns a list of events representing the last event on each control of a give Input Controller
  rpc GetEvents(InputControllerServiceGetEventsRequest) returns (InputControllerServiceGetEventsResponse) {
    option (google.api.http) = {
      get: "/api/v1/component/input/{controller}/last_events"
    };
  }

  // StreamEvents starts a stream of InputControllerEvents for the given controls (buttons/axes) on a robot's input controller 
  rpc StreamEvents(InputControllerServiceStreamEventsRequest) returns (stream InputControllerServiceStreamEventsResponse) {
    option (google.api.http) = {
      get: "/api/v1/component/input/{controller}/event_stream"
    };
  }

  // TriggerEvent, where supported, injects an InputControllerEvent into an input controller to (virtually) generate events 
  // like button presses or axis movements  
  rpc TriggerEvent(InputControllerServiceTriggerEventRequest) returns (InputControllerServiceTriggerEventResponse) {
    option (google.api.http) = {
      post: "/api/v1/component/input/{controller}/inject_event"
    };
  }
}

message InputControllerServiceGetControlsRequest {
  // Name of an input controller
  string controller = 1;
}

message InputControllerServiceGetControlsResponse {
  // Returns a list of all the controls (buttons and axes) that are
  // available to a given Input Controller 
  repeated string controls = 1;
}

message InputControllerServiceGetEventsRequest {
  // Name of an input controller 
  string controller = 1;
}

message InputControllerServiceGetEventsResponse {
  // Returns a list of the most recent event for each control on a given InputController. Effectively provides the current "state" of all 
  // buttons/axes on a given input controller 
  repeated InputControllerServiceEvent events = 1;
}

message InputControllerServiceTriggerEventRequest {
  // Name of an input controller 
  string controller = 1;
  // Digitally assert a given event 
  InputControllerServiceEvent event = 2;
}

message InputControllerServiceTriggerEventResponse {
}

message InputControllerServiceEvent {
  // Timestamp of event
  google.protobuf.Timestamp time = 1;
  // An event type (eg: ButtonPress, ButtonRelease)
  string event = 2;
  // A control, can be a button (eg: ButtonSouth) or an axis (eg: AbsoluteX)
  string control = 3;
  // 0 or 1 for buttons, -1.0 to +1.0 for axes
  double value = 4;
}

message InputControllerServiceStreamEventsRequest {
  message Events {
    // Name of a control (button or axis)
    string control = 1;
    // Specify which event types to recieve events for
    // To Do (FA): Right now this can be an empty list, but we should error in this case as opening a stream with no messages is expensive
    repeated string events = 2;
    // Specify which event types to stop recieving events for
    // This can be an empty list 
    repeated string cancelled_events = 3;
  }
  // Name of an input controller 
  string controller = 1;
  // A list of Events
  repeated Events events = 2;
}

message InputControllerServiceStreamEventsResponse {
  // Event for a controller
  InputControllerServiceEvent event = 1;
}
