// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IMUServiceClient is the client API for IMUService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IMUServiceClient interface {
	// ReadAngularVelocity returns the most recent angular velocity reading from the given IMU.
	ReadAngularVelocity(ctx context.Context, in *IMUServiceReadAngularVelocityRequest, opts ...grpc.CallOption) (*IMUServiceReadAngularVelocityResponse, error)
	// ReadOrientation returns the most recent orientation reading from the given IMU.
	ReadOrientation(ctx context.Context, in *IMUServiceReadOrientationRequest, opts ...grpc.CallOption) (*IMUServiceReadOrientationResponse, error)
}

type iMUServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIMUServiceClient(cc grpc.ClientConnInterface) IMUServiceClient {
	return &iMUServiceClient{cc}
}

func (c *iMUServiceClient) ReadAngularVelocity(ctx context.Context, in *IMUServiceReadAngularVelocityRequest, opts ...grpc.CallOption) (*IMUServiceReadAngularVelocityResponse, error) {
	out := new(IMUServiceReadAngularVelocityResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.IMUService/ReadAngularVelocity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iMUServiceClient) ReadOrientation(ctx context.Context, in *IMUServiceReadOrientationRequest, opts ...grpc.CallOption) (*IMUServiceReadOrientationResponse, error) {
	out := new(IMUServiceReadOrientationResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.IMUService/ReadOrientation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IMUServiceServer is the server API for IMUService service.
// All implementations must embed UnimplementedIMUServiceServer
// for forward compatibility
type IMUServiceServer interface {
	// ReadAngularVelocity returns the most recent angular velocity reading from the given IMU.
	ReadAngularVelocity(context.Context, *IMUServiceReadAngularVelocityRequest) (*IMUServiceReadAngularVelocityResponse, error)
	// ReadOrientation returns the most recent orientation reading from the given IMU.
	ReadOrientation(context.Context, *IMUServiceReadOrientationRequest) (*IMUServiceReadOrientationResponse, error)
	mustEmbedUnimplementedIMUServiceServer()
}

// UnimplementedIMUServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIMUServiceServer struct {
}

func (UnimplementedIMUServiceServer) ReadAngularVelocity(context.Context, *IMUServiceReadAngularVelocityRequest) (*IMUServiceReadAngularVelocityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAngularVelocity not implemented")
}
func (UnimplementedIMUServiceServer) ReadOrientation(context.Context, *IMUServiceReadOrientationRequest) (*IMUServiceReadOrientationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadOrientation not implemented")
}
func (UnimplementedIMUServiceServer) mustEmbedUnimplementedIMUServiceServer() {}

// UnsafeIMUServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IMUServiceServer will
// result in compilation errors.
type UnsafeIMUServiceServer interface {
	mustEmbedUnimplementedIMUServiceServer()
}

func RegisterIMUServiceServer(s grpc.ServiceRegistrar, srv IMUServiceServer) {
	s.RegisterService(&IMUService_ServiceDesc, srv)
}

func _IMUService_ReadAngularVelocity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IMUServiceReadAngularVelocityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMUServiceServer).ReadAngularVelocity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.IMUService/ReadAngularVelocity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMUServiceServer).ReadAngularVelocity(ctx, req.(*IMUServiceReadAngularVelocityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IMUService_ReadOrientation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IMUServiceReadOrientationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IMUServiceServer).ReadOrientation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.IMUService/ReadOrientation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IMUServiceServer).ReadOrientation(ctx, req.(*IMUServiceReadOrientationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IMUService_ServiceDesc is the grpc.ServiceDesc for IMUService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IMUService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.api.component.v1.IMUService",
	HandlerType: (*IMUServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadAngularVelocity",
			Handler:    _IMUService_ReadAngularVelocity_Handler,
		},
		{
			MethodName: "ReadOrientation",
			Handler:    _IMUService_ReadOrientation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api/component/v1/imu.proto",
}
