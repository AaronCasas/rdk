// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GPSServiceClient is the client API for GPSService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GPSServiceClient interface {
	// ReadLocation returns the most recent location from the given GPS.
	ReadLocation(ctx context.Context, in *GPSServiceReadLocationRequest, opts ...grpc.CallOption) (*GPSServiceReadLocationResponse, error)
	// ReadAltitude returns the most recent altitude from the given GPS.
	ReadAltitude(ctx context.Context, in *GPSServiceReadAltitudeRequest, opts ...grpc.CallOption) (*GPSServiceReadAltitudeResponse, error)
	// ReadSpeed returns the most recent speed from the given GPS.
	ReadSpeed(ctx context.Context, in *GPSServiceReadSpeedRequest, opts ...grpc.CallOption) (*GPSServiceReadSpeedResponse, error)
}

type gPSServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGPSServiceClient(cc grpc.ClientConnInterface) GPSServiceClient {
	return &gPSServiceClient{cc}
}

func (c *gPSServiceClient) ReadLocation(ctx context.Context, in *GPSServiceReadLocationRequest, opts ...grpc.CallOption) (*GPSServiceReadLocationResponse, error) {
	out := new(GPSServiceReadLocationResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.GPSService/ReadLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPSServiceClient) ReadAltitude(ctx context.Context, in *GPSServiceReadAltitudeRequest, opts ...grpc.CallOption) (*GPSServiceReadAltitudeResponse, error) {
	out := new(GPSServiceReadAltitudeResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.GPSService/ReadAltitude", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gPSServiceClient) ReadSpeed(ctx context.Context, in *GPSServiceReadSpeedRequest, opts ...grpc.CallOption) (*GPSServiceReadSpeedResponse, error) {
	out := new(GPSServiceReadSpeedResponse)
	err := c.cc.Invoke(ctx, "/proto.api.component.v1.GPSService/ReadSpeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GPSServiceServer is the server API for GPSService service.
// All implementations must embed UnimplementedGPSServiceServer
// for forward compatibility
type GPSServiceServer interface {
	// ReadLocation returns the most recent location from the given GPS.
	ReadLocation(context.Context, *GPSServiceReadLocationRequest) (*GPSServiceReadLocationResponse, error)
	// ReadAltitude returns the most recent altitude from the given GPS.
	ReadAltitude(context.Context, *GPSServiceReadAltitudeRequest) (*GPSServiceReadAltitudeResponse, error)
	// ReadSpeed returns the most recent speed from the given GPS.
	ReadSpeed(context.Context, *GPSServiceReadSpeedRequest) (*GPSServiceReadSpeedResponse, error)
	mustEmbedUnimplementedGPSServiceServer()
}

// UnimplementedGPSServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGPSServiceServer struct {
}

func (UnimplementedGPSServiceServer) ReadLocation(context.Context, *GPSServiceReadLocationRequest) (*GPSServiceReadLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadLocation not implemented")
}
func (UnimplementedGPSServiceServer) ReadAltitude(context.Context, *GPSServiceReadAltitudeRequest) (*GPSServiceReadAltitudeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAltitude not implemented")
}
func (UnimplementedGPSServiceServer) ReadSpeed(context.Context, *GPSServiceReadSpeedRequest) (*GPSServiceReadSpeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSpeed not implemented")
}
func (UnimplementedGPSServiceServer) mustEmbedUnimplementedGPSServiceServer() {}

// UnsafeGPSServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GPSServiceServer will
// result in compilation errors.
type UnsafeGPSServiceServer interface {
	mustEmbedUnimplementedGPSServiceServer()
}

func RegisterGPSServiceServer(s grpc.ServiceRegistrar, srv GPSServiceServer) {
	s.RegisterService(&GPSService_ServiceDesc, srv)
}

func _GPSService_ReadLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GPSServiceReadLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPSServiceServer).ReadLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.GPSService/ReadLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPSServiceServer).ReadLocation(ctx, req.(*GPSServiceReadLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPSService_ReadAltitude_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GPSServiceReadAltitudeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPSServiceServer).ReadAltitude(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.GPSService/ReadAltitude",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPSServiceServer).ReadAltitude(ctx, req.(*GPSServiceReadAltitudeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GPSService_ReadSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GPSServiceReadSpeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GPSServiceServer).ReadSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.api.component.v1.GPSService/ReadSpeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GPSServiceServer).ReadSpeed(ctx, req.(*GPSServiceReadSpeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GPSService_ServiceDesc is the grpc.ServiceDesc for GPSService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GPSService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.api.component.v1.GPSService",
	HandlerType: (*GPSServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadLocation",
			Handler:    _GPSService_ReadLocation_Handler,
		},
		{
			MethodName: "ReadAltitude",
			Handler:    _GPSService_ReadAltitude_Handler,
		},
		{
			MethodName: "ReadSpeed",
			Handler:    _GPSService_ReadSpeed_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/api/component/v1/gps.proto",
}
